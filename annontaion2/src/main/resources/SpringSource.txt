Spring容器启动过程

Spring容器的refresh()创建刷新方法中的12个步骤

1、prepareRefresh();【为即将进行的刷新准备上下文】
   1)、initPropertySources();初始化一些属性设置，这是个空方法，其子类可以自定义个性化的属性设置方法
   2)、getEnvironment().validateRequiredProperties();校验定义的属性的合法性
   3)、this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>(); 保存容器中的一些早期事件

2、obtainFreshBeanFactory()，创建并获取BeanFactory
   1)、refreshBeanFactory();刷新（创建BeanFactory）
        创建：在org.springframework.context.support.GenericApplicationContext类中
                /**
               	 * Create a new GenericApplicationContext.
               	 * @see #registerBeanDefinition
               	 * @see #refresh
               	 */
               	public GenericApplicationContext() {
               		this.beanFactory = new DefaultListableBeanFactory();
               	}
        设置serializationId属性：this.beanFactory.setSerializationId(getId());
   2)、getBeanFactory();返回刚才创建的BeanFactory
   3)、将刚才创建的DefaultListableBeanFactory返回

3、prepareBeanFactory(beanFactory);BeanFactory的预准备工作(BeanFactory进行一些设置，对BeanFactory中的属性值做一些设置)
    1)、设置BeanFactory的类加载器、支持表达式解析器...
    2)、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
    3)、设置忽略的自动装配的接口EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware...
           其作用是这些接口的实现类不能通过接口的类型来实现自动注入
    4)、注册可以解析的自动装配类，我们能直接在任何组件中使用@Autowired注解注入BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext这些bean
    5)、添加BeanPostProcessor【ApplicationListenerDetector】
    6)、添加编译事的AspectJ
    7)、给BeanFactory中注册一些组件environment【ConfigurableEnvironment】、systemProperties【Map<String, Object>】、systemEnvironment【Map<String, Object>】

 4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成以后进行的后置处理工作
    1)、这是一个空方法，子类可以重写这个方法在BeanFactory创建并预准备完成以后做进一步的设置

=============以上是BeanFactory的创建及预准备工作=======================================================================================================================
 5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
    1)、BeanFactoryPostProcessor是BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的
    2)、主要有两个接口： BeanFactoryPostProcessor和它的子接口BeanDefinitionRegistryPostProcessor，子接口的实现要在父接口的实现类之前执行
    3)、执行BeanFactoryPostProcessor的postProcessBeanFactory()方法和执行BeanDefinitionRegistryPostProcessor类的postProcessBeanDefinitionRegistry()方法
          1)、获取所有的BeanDefinitionRegistryPostProcessor实现类，再看这些类是否有实现PriorityOrdered(优先级)，先执行实现了PriorityOrdered类的postProcessBeanDefinitionRegistry()方法；
          2)、再看这些类是否实现了Ordered接口，再执行这些类的postProcessBeanDefinitionRegistry()方法；
          3)、最后执行没有实现任何接口的BeanDefinitionRegistryPostProcessor的实现类的postProcessBeanDefinitionRegistry()方法；

          4)、再来获取所有的BeanFactoryPostProcessor实现类，执行逻辑和BeanDefinitionRegistry类方法的执行顺序一样，看实现类是否实现了PriorityOrdered、Ordered接口
 6、registerBeanPostProcessors(beanFactory);注册BeanPostProcessor（Bean的后置处理器）【 intercept bean creation】
 		不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的
 		BeanPostProcessor、
 		DestructionAwareBeanPostProcessor、
 		InstantiationAwareBeanPostProcessor、
 		SmartInstantiationAwareBeanPostProcessor、
 		MergedBeanDefinitionPostProcessor【internalPostProcessors】、

 		1）、获取所有的 BeanPostProcessor;后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级
 		2）、先注册PriorityOrdered优先级接口的BeanPostProcessor；
 			把每一个BeanPostProcessor；添加到BeanFactory中
 			beanFactory.addBeanPostProcessor(postProcessor);
 		3）、再注册Ordered接口的
 		4）、最后注册没有实现任何优先级接口的
 		5）、最终注册MergedBeanDefinitionPostProcessor；
 		6）、注册一个ApplicationListenerDetector；来在Bean创建完成后检查是否是ApplicationListener，如果是
 			applicationContext.addApplicationListener((ApplicationListener<?>) bean);
 7、initMessageSource();初始化MessageSource组件（做国际化功能；消息绑定，消息解析）；
 		1）、获取BeanFactory
 		2）、看容器中是否有id为messageSource的，类型是MessageSource的组件
 			如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource；
 				MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取；
 		3）、把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource；
 			beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
 			MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale);
 8、initApplicationEventMulticaster();初始化事件派发器；
 		1）、获取BeanFactory
 		2）、从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster；
 		3）、如果上一步没有配置；创建一个SimpleApplicationEventMulticaster
 		4）、将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入
 9、onRefresh();留给子容器（子类）
 		1、子类重写这个方法，在容器刷新的时候可以自定义逻辑；
 10、registerListeners();给容器中将所有项目里面的ApplicationListener注册进来；
 		1、从容器中拿到所有的ApplicationListener
 		2、将每个监听器添加到事件派发器中；
 			getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
 		3、派发之前步骤产生的事件；

11、finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean；
	1、beanFactory.preInstantiateSingletons();初始化后剩下的单实例bean
		1）、获取容器中的所有Bean，依次进行初始化和创建对象
		2）、获取Bean的定义信息；RootBeanDefinition
		3）、Bean不是抽象的，是单实例的，不是懒加载；
			1）、判断是否是FactoryBean；是否是实现FactoryBean接口的Bean；
			2）、不是工厂Bean。利用getBean(beanName);创建对象
				0、getBean(beanName)； ioc.getBean();
				1、doGetBean(name, null, null, false);
				2、先获取缓存中保存的单实例Bean。如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）
					从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);获取的
				3、缓存中获取不到，开始Bean的创建对象流程；
				4、标记当前bean已经被创建
				5、获取Bean的定义信息；
				6、【获取当前Bean依赖的其他Bean;如果有按照getBean()把依赖的Bean先创建出来；】
				7、启动单实例Bean的创建流程；
					1）、createBean(beanName, mbd, args);
					2）、Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessor先拦截返回代理对象；
						【InstantiationAwareBeanPostProcessor】：提前执行；
						先触发：postProcessBeforeInstantiation()；
						如果有返回值：触发postProcessAfterInitialization()；
					3）、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象；调用4）
					4）、Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建Bean
						 1）、【创建Bean实例】；createBeanInstance(beanName, mbd, args);
						 	利用工厂方法或者对象的构造器创建出Bean实例；
						 2）、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
						 	调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition(mbd, beanType, beanName);
						 3）、【Bean属性赋值】populateBean(beanName, mbd, instanceWrapper);
						 	赋值之前：
						 	1）、拿到InstantiationAwareBeanPostProcessor后置处理器；
						 		postProcessAfterInstantiation()；
						 	2）、拿到InstantiationAwareBeanPostProcessor后置处理器；
						 		postProcessPropertyValues()；
						 	=====赋值之前：===
						 	3）、应用Bean属性的值；为属性利用setter方法等进行赋值；
						 		applyPropertyValues(beanName, mbd, bw, pvs);
						 4）、【Bean初始化】initializeBean(beanName, exposedObject, mbd);
						 	1）、【执行Aware接口方法】invokeAwareMethods(beanName, bean);执行xxxAware接口的方法
						 		BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
						 	2）、【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
						 		BeanPostProcessor.postProcessBeforeInitialization（）;
						 	3）、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);
						 		1）、是否是InitializingBean接口的实现；执行接口规定的初始化；
						 		2）、是否自定义初始化方法；
						 	4）、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization
						 		BeanPostProcessor.postProcessAfterInitialization()；
						 5）、注册Bean的销毁方法；
					5）、将创建的Bean添加到缓存中singletonObjects；
				ioc容器就是这些Map；很多的Map里面保存了单实例Bean，环境信息。。。。；
		所有Bean都利用getBean创建完成以后；
			检查所有的Bean是否是SmartInitializingSingleton接口的；如果是；就执行afterSingletonsInstantiated()；

























